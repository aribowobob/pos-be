name: Production Deployment

on:
  push:
    tags:
      - "v*" # Run workflow on version tags, e.g. v1.0.0

env:
  DOCKER_IMAGE: aribowobob/pos-be
  DROPLET_IP: ${{ vars.DROPLET_IP }}

jobs:
  check-secrets:
    name: Check Required Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Check Docker Credentials
        id: check-secrets
        run: |
          echo "Checking required secrets..."
          # Secara aman memeriksa apakah secrets ada
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
            echo "::error::DOCKER_USERNAME secret is not set. Please add it in repository settings."
            exit 1
          fi

          if [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "::error::DOCKER_PASSWORD secret is not set. Please add it in repository settings."
            exit 1
          fi

          if [ -z "${{ vars.DROPLET_IP }}" ]; then
            echo "::error::DROPLET_IP variable is not set. Please add it in repository settings."
            exit 1
          fi

          if [ -z "${{ secrets.DO_TOKEN }}" ]; then
            echo "::warning::DO_TOKEN secret is not set. SSH access may be affected."
          fi

          # Check Google OAuth credentials
          if [ -z "${{ secrets.GOOGLE_CLIENT_ID }}" ]; then
            echo "::warning::GOOGLE_CLIENT_ID secret is not set. Google authentication will not work correctly."
          fi

          if [ -z "${{ secrets.GOOGLE_CLIENT_SECRET }}" ]; then
            echo "::warning::GOOGLE_CLIENT_SECRET secret is not set. Google authentication will not work correctly."
          fi

          echo "All required secrets are available."

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: check-secrets
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract tag name
        id: tag
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/v}
          echo "TAG=$TAG_NAME" >> $GITHUB_OUTPUT

      # Coba menggunakan variabel langsung tanpa tindakan login khusus
      - name: Login to Docker Hub
        run: |
          echo "Logging in to Docker Hub..."
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Debug Docker credentials
        if: ${{ always() }}
        run: |
          echo "Debug: Checking Docker Hub login status"
          if docker info > /dev/null 2>&1; then
            echo "Docker is running and connected"
          else
            echo "Docker has issues connecting"
          fi

          echo "Debug: Checking if DOCKER_USERNAME and DOCKER_PASSWORD secrets exist"
          # Secara aman memeriksa keberadaan secrets tanpa mengekspos nilai
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ]; then
            echo "DOCKER_USERNAME is set"
          else
            echo "DOCKER_USERNAME is NOT set"
          fi

          if [ -n "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "DOCKER_PASSWORD is set"
          else
            echo "DOCKER_PASSWORD is NOT set"
          fi

      - name: Check Docker Login Status
        id: login-status
        continue-on-error: true
        run: docker info > /dev/null 2>&1

      - name: Build and push without registry cache
        if: ${{ failure() && steps.login-status.outcome == 'failure' }}
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: true
          tags: ${{ env.DOCKER_IMAGE }}:latest,${{ env.DOCKER_IMAGE }}:${{ steps.tag.outputs.TAG }}

      - name: Build and push with registry cache
        if: ${{ steps.login-status.outcome == 'success' }}
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest,${{ env.DOCKER_IMAGE }}:${{ steps.tag.outputs.TAG }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max

  deploy:
    name: Deploy to Digital Ocean
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract tag name
        id: tag
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/v}
          echo "TAG=$TAG_NAME" >> $GITHUB_OUTPUT

      # Menggunakan metode yang lebih pasti untuk SSH ke droplet
      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Setup SSH Configuration
        run: |
          mkdir -p ~/.ssh
          echo "Host *" > ~/.ssh/config
          echo "    StrictHostKeyChecking no" >> ~/.ssh/config
          echo "    UserKnownHostsFile /dev/null" >> ~/.ssh/config
          echo "    ConnectTimeout 30" >> ~/.ssh/config
          echo "    ServerAliveInterval 60" >> ~/.ssh/config
          echo "    ServerAliveCountMax 3" >> ~/.ssh/config
          echo "    TCPKeepAlive yes" >> ~/.ssh/config
          echo "    Compression yes" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Deploy to Digital Ocean Droplet
        env:
          TAG: ${{ steps.tag.outputs.TAG }}
          SSH_PASSWORD: ${{ secrets.DROPLET_PASSWORD }}
        run: |
          export SSHPASS=$SSH_PASSWORD

          # Test SSH connection first with retry logic
          echo "Testing SSH connection to droplet..."
          for i in {1..3}; do
            if sshpass -e ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no root@${{ env.DROPLET_IP }} "echo 'SSH connection successful!'"; then
              echo "SSH connection established on attempt $i"
              break
            else
              echo "SSH connection attempt $i failed, retrying in 10 seconds..."
              sleep 10
              if [ $i -eq 3 ]; then
                echo "SSH connection failed after 3 attempts"
                exit 1
              fi
            fi
          done

          # Copy docker-compose.yml to server
          echo "Copying docker-compose.yml to server..."
          sshpass -e scp -o ConnectTimeout=30 -o StrictHostKeyChecking=no docker-compose.yml root@${{ env.DROPLET_IP }}:/root/pos-app/

          # Create deployment directory
          echo "Creating deployment directory..."
          sshpass -e ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no root@${{ env.DROPLET_IP }} "mkdir -p /root/pos-app"

          # Create .env file on server with a single command
          echo "Creating .env file on server..."
          sshpass -e ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no root@${{ env.DROPLET_IP }} "echo 'POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}' > /root/pos-app/.env"
          sshpass -e ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no root@${{ env.DROPLET_IP }} "echo 'JWT_SECRET=${{ secrets.JWT_SECRET || 'default_jwt_secret_for_production' }}' >> /root/pos-app/.env"
          sshpass -e ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no root@${{ env.DROPLET_IP }} "echo 'FRONTEND_URLS=${{ vars.FRONTEND_URLS || 'http://localhost:3000,https://your-production-url.com,https://staging-url.com' }}' >> /root/pos-app/.env"
          sshpass -e ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no root@${{ env.DROPLET_IP }} "echo 'GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}' >> /root/pos-app/.env"
          sshpass -e ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no root@${{ env.DROPLET_IP }} "echo 'GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}' >> /root/pos-app/.env"
          sshpass -e ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no root@${{ env.DROPLET_IP }} "echo 'ENVIRONMENT=production' >> /root/pos-app/.env"

          # Create Docker Hub credentials file on server
          echo "Creating Docker Hub credentials file on server..."
          DOCKER_AUTH=$(echo -n "${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }}" | base64)
          sshpass -e ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no root@${{ env.DROPLET_IP }} "mkdir -p /root/.docker"
          sshpass -e ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no root@${{ env.DROPLET_IP }} "echo '{\"auths\":{\"https://index.docker.io/v1/\":{\"auth\":\"$DOCKER_AUTH\"}}}' > /root/.docker/config.json"

          # Pull the latest image and restart containers
          echo "Pulling Docker images and restarting containers..."
          sshpass -e ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no root@${{ env.DROPLET_IP }} "cd /root/pos-app && docker pull ${{ env.DOCKER_IMAGE }}:$TAG && docker pull ${{ env.DOCKER_IMAGE }}:latest && docker-compose down && docker-compose up -d"

      - name: Verify deployment
        env:
          SSH_PASSWORD: ${{ secrets.DROPLET_PASSWORD }}
        run: |
          export SSHPASS=$SSH_PASSWORD

          echo "Waiting for service to start..."
          sleep 30

          # Check container status
          echo "Checking container status:"
          sshpass -e ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no root@${{ env.DROPLET_IP }} "docker ps" || echo "Cannot check container status"

          # Check container logs
          echo "Checking container logs (last 10 lines):"
          sshpass -e ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no root@${{ env.DROPLET_IP }} "docker logs \$(docker ps -qf 'name=pos-app_api' 2>/dev/null || echo 'no-container') --tail 10 2>/dev/null || echo 'Cannot fetch logs'"

          # Check if port is listening
          echo "Checking if port 8080 is listening:"
          sshpass -e ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no root@${{ env.DROPLET_IP }} "netstat -tlnp | grep :8080 || echo 'Port 8080 not listening'"

          # Perform health check
          echo "Performing health check:"
          curl -sSf --connect-timeout 10 --max-time 30 http://${{ env.DROPLET_IP }}:8080/api/health || echo "Health check failed but continuing"

          echo "Deployment verification completed!"
