name: Production Deployment

on:
  push:
    tags:
      - "v*" # Run workflow on version tags, e.g. v1.0.0

env:
  DOCKER_IMAGE: aribowobob/pos-be
  DROPLET_IP: ${{ vars.DROPLET_IP }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract tag name
        id: tag
        run: echo "TAG=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Debug Docker credentials (secret names only, not values)
        if: ${{ failure() }}
        run: |
          echo "Debug: Checking if DOCKER_USERNAME and DOCKER_PASSWORD secrets are available"
          if [ "${{ secrets.DOCKER_USERNAME != '' }}" == "true" ]; then
            echo "DOCKER_USERNAME is set"
          else
            echo "DOCKER_USERNAME is NOT set"
          fi

          if [ "${{ secrets.DOCKER_PASSWORD != '' }}" == "true" ]; then
            echo "DOCKER_PASSWORD is set"
          else
            echo "DOCKER_PASSWORD is NOT set"
          fi

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest,${{ env.DOCKER_IMAGE }}:${{ steps.tag.outputs.TAG }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max

  deploy:
    name: Deploy to Digital Ocean
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract tag name
        id: tag
        run: echo "TAG=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_TOKEN }}

      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY || secrets.DO_TOKEN }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Setup SSH to ignore host key checking
        run: |
          mkdir -p ~/.ssh
          echo -e "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile /dev/null" > ~/.ssh/config

      - name: Deploy to Digital Ocean Droplet
        env:
          TAG: ${{ steps.tag.outputs.TAG }}
        run: |
          # Test SSH connection first
          echo "Testing SSH connection to droplet..."
          ssh -o StrictHostKeyChecking=no root@${{ env.DROPLET_IP }} "echo 'SSH connection successful!'" || { echo "SSH connection failed"; exit 1; }

          # Create deployment directory
          echo "Creating deployment directory..."
          ssh -o StrictHostKeyChecking=no root@${{ env.DROPLET_IP }} "mkdir -p /root/pos-app"

          # Copy docker-compose.yml to server
          echo "Copying docker-compose.yml to server..."
          scp -o StrictHostKeyChecking=no docker-compose.yml root@${{ env.DROPLET_IP }}:/root/pos-app/

          # Create .env file on server
          echo "Creating .env file on server..."
          ssh -o StrictHostKeyChecking=no root@${{ env.DROPLET_IP }} "cat > /root/pos-app/.env << 'EOF'
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET || 'default_jwt_secret_for_production' }}
          FRONTEND_URL=https://your-frontend-url.com
          EOF"

          # Pull the latest image and restart containers
          echo "Pulling Docker images and restarting containers..."
          ssh -o StrictHostKeyChecking=no root@${{ env.DROPLET_IP }} "cd /root/pos-app && \
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} && \
            docker pull ${{ env.DOCKER_IMAGE }}:$TAG && \
            docker pull ${{ env.DOCKER_IMAGE }}:latest && \
            docker-compose down && \
            docker-compose up -d"

      - name: Verify deployment
        run: |
          echo "Waiting for service to start..."
          sleep 30
          curl -sSf http://${{ env.DROPLET_IP }}:8080/api/health || echo "Health check failed but continuing"
          echo "Deployment completed!"
